/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Face', null, global);
goog.exportSymbol('proto.Face.FaceProperty', null, global);
goog.exportSymbol('proto.Face.Gender', null, global);
goog.exportSymbol('proto.FaceDetectionResult', null, global);
goog.exportSymbol('proto.FaceShape', null, global);
goog.exportSymbol('proto.Pose', null, global);
goog.exportSymbol('proto.Rect', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Rect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Rect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Rect.displayName = 'proto.Rect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Rect.prototype.toObject = function(opt_includeInstance) {
  return proto.Rect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Rect} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Rect.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getField(msg, 1),
    y: jspb.Message.getField(msg, 2),
    w: jspb.Message.getField(msg, 3),
    h: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Rect}
 */
proto.Rect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Rect;
  return proto.Rect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Rect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Rect}
 */
proto.Rect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setW(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setH(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Rect} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Rect.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Rect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Rect.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 x = 1;
 * @return {number}
 */
proto.Rect.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Rect.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Rect.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Rect.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 y = 2;
 * @return {number}
 */
proto.Rect.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Rect.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Rect.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Rect.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 w = 3;
 * @return {number}
 */
proto.Rect.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Rect.prototype.setW = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Rect.prototype.clearW = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Rect.prototype.hasW = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 h = 4;
 * @return {number}
 */
proto.Rect.prototype.getH = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Rect.prototype.setH = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Rect.prototype.clearH = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Rect.prototype.hasH = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Pose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Pose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Pose.displayName = 'proto.Pose';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Pose.prototype.toObject = function(opt_includeInstance) {
  return proto.Pose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Pose} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Pose.toObject = function(includeInstance, msg) {
  var f, obj = {
    roll: +jspb.Message.getField(msg, 1),
    yaw: +jspb.Message.getField(msg, 2),
    pitch: +jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Pose}
 */
proto.Pose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Pose;
  return proto.Pose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Pose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Pose}
 */
proto.Pose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRoll(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYaw(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPitch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Pose} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Pose.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Pose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Pose.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * required float roll = 1;
 * @return {number}
 */
proto.Pose.prototype.getRoll = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Pose.prototype.setRoll = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Pose.prototype.clearRoll = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Pose.prototype.hasRoll = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float yaw = 2;
 * @return {number}
 */
proto.Pose.prototype.getYaw = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Pose.prototype.setYaw = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Pose.prototype.clearYaw = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Pose.prototype.hasYaw = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float pitch = 3;
 * @return {number}
 */
proto.Pose.prototype.getPitch = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Pose.prototype.setPitch = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Pose.prototype.clearPitch = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Pose.prototype.hasPitch = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FaceShape = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FaceShape.repeatedFields_, null);
};
goog.inherits(proto.FaceShape, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FaceShape.displayName = 'proto.FaceShape';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FaceShape.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FaceShape.prototype.toObject = function(opt_includeInstance) {
  return proto.FaceShape.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FaceShape} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FaceShape.toObject = function(includeInstance, msg) {
  var f, obj = {
    xList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    yList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    visibilityList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    confidence: +jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FaceShape}
 */
proto.FaceShape.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FaceShape;
  return proto.FaceShape.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FaceShape} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FaceShape}
 */
proto.FaceShape.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setXList(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setYList(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedFloat());
      msg.setVisibilityList(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.FaceShape} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FaceShape.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FaceShape.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.FaceShape.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getXList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = this.getYList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = this.getVisibilityList();
  if (f.length > 0) {
    writer.writePackedFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * repeated float x = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.FaceShape.prototype.getXList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array.<number>} value */
proto.FaceShape.prototype.setXList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.FaceShape.prototype.addX = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.FaceShape.prototype.clearXList = function() {
  this.setXList([]);
};


/**
 * repeated float y = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.FaceShape.prototype.getYList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array.<number>} value */
proto.FaceShape.prototype.setYList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.FaceShape.prototype.addY = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.FaceShape.prototype.clearYList = function() {
  this.setYList([]);
};


/**
 * repeated float visibility = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.FaceShape.prototype.getVisibilityList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array.<number>} value */
proto.FaceShape.prototype.setVisibilityList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.FaceShape.prototype.addVisibility = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.FaceShape.prototype.clearVisibilityList = function() {
  this.setVisibilityList([]);
};


/**
 * required float confidence = 4;
 * @return {number}
 */
proto.FaceShape.prototype.getConfidence = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.FaceShape.prototype.setConfidence = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.FaceShape.prototype.clearConfidence = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FaceShape.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Face = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Face.repeatedFields_, null);
};
goog.inherits(proto.Face, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Face.displayName = 'proto.Face';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Face.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Face.prototype.toObject = function(opt_includeInstance) {
  return proto.Face.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Face} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Face.toObject = function(includeInstance, msg) {
  var f, obj = {
    rect: (f = msg.getRect()) && proto.Rect.toObject(includeInstance, f),
    shape: (f = msg.getShape()) && proto.FaceShape.toObject(includeInstance, f),
    pose: (f = msg.getPose()) && proto.Pose.toObject(includeInstance, f),
    confidence: +jspb.Message.getField(msg, 4),
    traceid: jspb.Message.getField(msg, 5),
    quality: jspb.Message.getOptionalFloatingPointField(msg, 6),
    nameconfidence: jspb.Message.getOptionalFloatingPointField(msg, 9),
    name: jspb.Message.getField(msg, 10),
    age: jspb.Message.getField(msg, 11),
    propertiesList: jspb.Message.getField(msg, 12),
    gender: jspb.Message.getField(msg, 13),
    alive: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Face}
 */
proto.Face.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Face;
  return proto.Face.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Face} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Face}
 */
proto.Face.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Rect;
      reader.readMessage(value,proto.Rect.deserializeBinaryFromReader);
      msg.setRect(value);
      break;
    case 2:
      var value = new proto.FaceShape;
      reader.readMessage(value,proto.FaceShape.deserializeBinaryFromReader);
      msg.setShape(value);
      break;
    case 3:
      var value = new proto.Pose;
      reader.readMessage(value,proto.Pose.deserializeBinaryFromReader);
      msg.setPose(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTraceid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setQuality(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNameconfidence(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 12:
      var value = /** @type {!proto.Face.FaceProperty} */ (reader.readEnum());
      msg.addProperties(value);
      break;
    case 13:
      var value = /** @type {!proto.Face.Gender} */ (reader.readEnum());
      msg.setGender(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Face} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Face.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Face.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Face.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRect();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Rect.serializeBinaryToWriter
    );
  }
  f = this.getShape();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.FaceShape.serializeBinaryToWriter
    );
  }
  f = this.getPose();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Pose.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(this, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = this.getPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      12,
      f
    );
  }
  f = /** @type {!proto.Face.Gender} */ (jspb.Message.getField(this, 13));
  if (f != null) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(this, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * required Rect rect = 1;
 * @return {!proto.Rect}
 */
proto.Face.prototype.getRect = function() {
  return /** @type{!proto.Rect} */ (
    jspb.Message.getWrapperField(this, proto.Rect, 1, 1));
};


/** @param {!proto.Rect} value */
proto.Face.prototype.setRect = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Face.prototype.clearRect = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasRect = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FaceShape shape = 2;
 * @return {?proto.FaceShape}
 */
proto.Face.prototype.getShape = function() {
  return /** @type{?proto.FaceShape} */ (
    jspb.Message.getWrapperField(this, proto.FaceShape, 2));
};


/** @param {?proto.FaceShape|undefined} value */
proto.Face.prototype.setShape = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Face.prototype.clearShape = function() {
  this.setShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasShape = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Pose pose = 3;
 * @return {?proto.Pose}
 */
proto.Face.prototype.getPose = function() {
  return /** @type{?proto.Pose} */ (
    jspb.Message.getWrapperField(this, proto.Pose, 3));
};


/** @param {?proto.Pose|undefined} value */
proto.Face.prototype.setPose = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Face.prototype.clearPose = function() {
  this.setPose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasPose = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float confidence = 4;
 * @return {number}
 */
proto.Face.prototype.getConfidence = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Face.prototype.setConfidence = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Face.prototype.clearConfidence = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 traceId = 5;
 * @return {number}
 */
proto.Face.prototype.getTraceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Face.prototype.setTraceid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Face.prototype.clearTraceid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasTraceid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float quality = 6;
 * @return {number}
 */
proto.Face.prototype.getQuality = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Face.prototype.setQuality = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Face.prototype.clearQuality = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasQuality = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float nameConfidence = 9;
 * @return {number}
 */
proto.Face.prototype.getNameconfidence = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.Face.prototype.setNameconfidence = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.Face.prototype.clearNameconfidence = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasNameconfidence = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string name = 10;
 * @return {string}
 */
proto.Face.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Face.prototype.setName = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.Face.prototype.clearName = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasName = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 age = 11;
 * @return {number}
 */
proto.Face.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Face.prototype.setAge = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.Face.prototype.clearAge = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasAge = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated FaceProperty properties = 12;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Face.FaceProperty>}
 */
proto.Face.prototype.getPropertiesList = function() {
  return /** @type {!Array.<!proto.Face.FaceProperty>} */ (jspb.Message.getField(this, 12));
};


/** @param {!Array.<!proto.Face.FaceProperty>} value */
proto.Face.prototype.setPropertiesList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!proto.Face.FaceProperty} value
 * @param {number=} opt_index
 */
proto.Face.prototype.addProperties = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.Face.prototype.clearPropertiesList = function() {
  this.setPropertiesList([]);
};


/**
 * optional Gender gender = 13;
 * @return {!proto.Face.Gender}
 */
proto.Face.prototype.getGender = function() {
  return /** @type {!proto.Face.Gender} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {!proto.Face.Gender} value */
proto.Face.prototype.setGender = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.Face.prototype.clearGender = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasGender = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool alive = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Face.prototype.getAlive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.Face.prototype.setAlive = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.Face.prototype.clearAlive = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Face.prototype.hasAlive = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * @enum {number}
 */
proto.Face.FaceProperty = {
  GLASS: 0,
  MASK: 1,
  HAT: 2
};

/**
 * @enum {number}
 */
proto.Face.Gender = {
  GIRL: 0,
  BOY: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FaceDetectionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FaceDetectionResult.repeatedFields_, null);
};
goog.inherits(proto.FaceDetectionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FaceDetectionResult.displayName = 'proto.FaceDetectionResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FaceDetectionResult.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FaceDetectionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.FaceDetectionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FaceDetectionResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.FaceDetectionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: jspb.Message.getField(msg, 1),
    height: jspb.Message.getField(msg, 2),
    faceList: jspb.Message.toObjectList(msg.getFaceList(),
    proto.Face.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FaceDetectionResult}
 */
proto.FaceDetectionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FaceDetectionResult;
  return proto.FaceDetectionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FaceDetectionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FaceDetectionResult}
 */
proto.FaceDetectionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 3:
      var value = new proto.Face;
      reader.readMessage(value,proto.Face.deserializeBinaryFromReader);
      msg.addFace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.FaceDetectionResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.FaceDetectionResult.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FaceDetectionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.FaceDetectionResult.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(this, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(this, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getFaceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Face.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 width = 1;
 * @return {number}
 */
proto.FaceDetectionResult.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.FaceDetectionResult.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.FaceDetectionResult.prototype.clearWidth = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FaceDetectionResult.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 height = 2;
 * @return {number}
 */
proto.FaceDetectionResult.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FaceDetectionResult.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.FaceDetectionResult.prototype.clearHeight = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FaceDetectionResult.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Face face = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Face>}
 */
proto.FaceDetectionResult.prototype.getFaceList = function() {
  return /** @type{!Array.<!proto.Face>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Face, 3));
};


/** @param {!Array.<!proto.Face>} value */
proto.FaceDetectionResult.prototype.setFaceList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Face=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Face}
 */
proto.FaceDetectionResult.prototype.addFace = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Face, opt_index);
};


proto.FaceDetectionResult.prototype.clearFaceList = function() {
  this.setFaceList([]);
};


goog.object.extend(exports, proto);
